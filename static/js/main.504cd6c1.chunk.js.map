{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Digimon","props","train","event","setState","state","strength","Math","floor","random","hunger","mood","feed","play","fight","currentDifficulty","EXP","digivole","currentRank","name","length","testImg","defaultimage","this","className","src","onClick","React","Component","App","egg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,8ICoBrCC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAeRC,MAAQ,SAACC,GACP,OAAO,EAAKC,UAAS,SAACC,EAAOJ,GAAR,MACnB,CAACK,SAAUD,EAAMC,SAAWC,KAAKC,MAAoB,GAAdD,KAAKE,SAAc,GACxDC,OAAQL,EAAMK,OAAS,EACvBC,KAAMN,EAAMM,KAAO,OApBP,EAyBlBC,KAAO,SAACT,GACN,OAAO,EAAKC,UAAS,SAACC,EAAOJ,GAAR,MACnB,CAACS,OAAQL,EAAMK,OAASH,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,QA3BzC,EA+BlBI,KAAO,SAACV,GACN,OAAO,EAAKC,UAAS,SAACC,EAAOJ,GAAR,MACnB,CAACU,KAAMN,EAAMM,KAAOJ,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,QAjCrC,EAqClBK,MAAQ,SAACX,GACP,GAAG,EAAKE,MAAMC,SAAWC,KAAKE,SAAW,EAAKJ,MAAMU,kBAAoB,EACtE,OAAO,EAAKX,UAAS,SAACC,EAAOJ,GAAR,MACnB,CAACe,IAAKX,EAAMW,IAAMT,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMU,mBACnDA,kBAAmBV,EAAMU,kBAAoBR,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7DE,KAAMN,EAAMM,KAAO,EACnBD,OAAQL,EAAMK,OAAS,OA3CX,EAkDlBO,SAAW,SAACd,GACV,GAAG,EAAKE,MAAMa,YAAc,EAAKjB,MAAMkB,KAAKC,OAAS,EACnD,OAAO,EAAKhB,UAAS,SAACC,EAAOJ,GAAR,MACjB,CAAEiB,YAAcb,EAAMa,YAAc,OAjD1C,EAAKb,MAAQ,CACXa,YAAc,EACdC,KAAM,EAAKlB,MAAMkB,KACjBE,QAAS,EAAKpB,MAAMqB,aACpBhB,SAAUC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAC3CC,OAAQ,EACRC,KAAM,EACNK,IAAK,EACLD,kBAAmB,IAZL,E,qDA4DhB,OACA,6BACE,4BAAKQ,KAAKlB,MAAMc,KAAKI,KAAKlB,MAAMa,cAChC,yBAAKM,UAAU,eACb,yBAAKA,UAAY,aACb,yCAAeD,KAAKlB,MAAMC,SAA1B,KACA,uCAAaiB,KAAKlB,MAAMK,OAAxB,KACA,0CAAgBa,KAAKlB,MAAMM,KAA3B,KACA,oCAAUY,KAAKlB,MAAMW,IAArB,MAEJ,yBAAKS,IAAKF,KAAKlB,MAAMgB,QAAQE,KAAKlB,MAAMa,gBAE1C,6BACA,yBAAKM,UAAU,eACb,4BAAQE,QAASH,KAAKV,MAAtB,QACA,4BAAQa,QAAUH,KAAKX,MAAvB,QACA,4BAAQc,QAASH,KAAKrB,OAAtB,SACA,4BAAQwB,QAASH,KAAKT,OAAtB,SACA,4BAAQY,QAASH,KAAKN,UAAtB,mB,GA/EcU,IAAMC,WAqFbC,EArGf,WACE,IAAIC,EAAM,CACRX,KAAK,CAAC,UAAW,aACjBE,QAAQ,CAAC,oJAAoJ,wJAE/J,OACE,yBAAKG,UAAU,OAEb,4BAAQA,UAAU,cAEhB,kBAAC,EAAD,CAASL,KAAMW,EAAIX,KAAMG,aAAcQ,EAAIT,aCF/BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.504cd6c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  let egg = {\n    name:['gabumon', 'garurumon'],\n    testImg:['https://vignette.wikia.nocookie.net/digimon/images/3/3c/Gabumon_%28New_Century%29_b.jpg/revision/latest/scale-to-width-down/150?cb=20200628050649','https://vignette.wikia.nocookie.net/digimon/images/c/c2/Garurumon_%28New_Century%29_b.jpg/revision/latest/scale-to-width-down/117?cb=20200629011929']\n  }\n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        \n        <Digimon name={egg.name} defaultimage={egg.testImg} />\n      </header>\n    </div>\n  );\n}\n\nclass Digimon extends React.Component{\n  constructor(props){\n    super(props)\n    \n    \n    this.state = {\n      currentRank : 0,\n      name: this.props.name,\n      testImg: this.props.defaultimage,\n      strength: Math.floor(Math.random() * 10) + 5,\n      hunger: 0,\n      mood: 5,\n      EXP: 0,\n      currentDifficulty: 10,\n    }\n  }\n\n  train = (event) =>{\n    return this.setState((state, props) =>(\n      {strength: state.strength + Math.floor(Math.random()*10 + 2),\n        hunger: state.hunger + 2,\n        mood: state.mood - 1\n        }\n    ))\n  }\n\n  feed = (event) => {\n    return this.setState((state, props) =>(\n      {hunger: state.hunger - Math.floor(Math.random() * 3 + 1)}\n    ))\n  }\n\n  play = (event) => {\n    return this.setState((state, props) => (\n      {mood: state.mood + Math.floor(Math.random() * 3 + 1)}\n    ))\n  }\n\n  fight = (event) => {\n    if(this.state.strength > Math.random() * this.state.currentDifficulty + 5){\n      return this.setState((state, props) => (\n        {EXP: state.EXP + Math.floor(Math.random() * state.currentDifficulty) ,\n        currentDifficulty: state.currentDifficulty + Math.floor(Math.random() * 10),\n        mood: state.mood - 2,\n        hunger: state.hunger + 2,\n\n        }\n      ))\n    }\n  }\n\n  digivole = (event) => {\n    if(this.state.currentRank < this.props.name.length - 1){\n      return this.setState((state, props)=>(\n          { currentRank : state.currentRank + 1,}\n        )\n      )\n    }\n  }\n\n  render(){\n    return (\n    <div>\n      <h1>{this.state.name[this.state.currentRank]}</h1>\n      <div className='imgandstats'>\n        <div className = 'statblock' >\n            <h3>Strength: {this.state.strength} </h3>\n            <h3>Hunger: {this.state.hunger} </h3>\n            <h3>Happiness: {this.state.mood} </h3>\n            <h3>EXP: {this.state.EXP} </h3>\n        </div>\n        <img src={this.state.testImg[this.state.currentRank]} />\n      </div>\n      <br />\n      <div className='buttonspace'>\n        <button onClick={this.play} >Play</button>\n        <button onClick= {this.feed} >Feed</button>\n        <button onClick={this.train} >Train</button>\n        <button onClick={this.fight} >Fight</button>\n        <button onClick={this.digivole} >Digivole!</button>\n      </div>\n    </div>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}